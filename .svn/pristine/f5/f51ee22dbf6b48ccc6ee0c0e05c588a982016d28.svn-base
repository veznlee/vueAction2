<template>
    <div class="table">
        <div class="container">
            <div class="handle-box">
                <div class="search-left">
                    <el-button type="primary" icon="add" @click="handleAdd()">新增</el-button>
                </div>
                <div align="right" class="search-right">
                    <el-input v-model="listParam.condition" placeholder="菜单名称" @keyup.enter.native="search" class="handle-input mr10"></el-input>
                    <el-button type="primary" icon="search" @click="search">搜索</el-button>
                </div>
            </div>
            <tree-table :data="tableData" :evalFunc="func" :expandAll="expandAll" border stripe>
                <el-table-column label="菜单编号" prop="ccode" align="center" width="300">
                </el-table-column>
                <el-table-column align="center" label="状态" width="80">
                    <template slot-scope="scope">
                        <el-switch v-model="scope.row.cstatus" @change="statusChange(scope.$index, scope.row)" active-color="#90c31f" inactive-color="#dcdfe6" active-value="2" inactive-value="1"></el-switch>
                    </template>
                </el-table-column>
                <el-table-column label="备注" prop="description" min-width="300">
                </el-table-column>
                <el-table-column label="操作" width="200" align="center" fixed="right">
                    <template slot-scope="scope">
                        <el-button size="small" type="success" plain @click="handleUpdate(scope.$index, scope.row)">编辑</el-button>
                        <el-button size="small" type="danger" @click="handleDelete(scope.$index, scope.row)">删除</el-button>
                        <span class="tree-subAdd" @click="handleSubMenu(scope.$index, scope.row)"><i class="el-icon-circle-plus"></i></span>
                    </template>
                </el-table-column>
            </tree-table>
        </div>

        <!-- 一级菜单编辑弹出框 -->
        <el-dialog :title="formTitle" :visible.sync="editVisible" width="30%" custom-class="mod-el-dialog">
            <el-form :rules="rules" ref="form" :model="form" label-width="100px">
                <el-form-item label="菜单编码">
                    <el-input v-model="form.ccode" disabled placeholder="编码自动生成"></el-input>
                </el-form-item>
                <el-form-item label="一级菜单" prop="cname">
                    <el-input v-model="form.cname"></el-input>
                </el-form-item>
                <el-form-item label="图标class" prop="icon">
                    <el-input v-model="form.icon"></el-input>
                </el-form-item>
                <el-form-item label="备注">
                    <el-input type="textarea" v-model="form.description"></el-input>
                </el-form-item>
                <el-form-item label="状态">
                    <el-switch v-model="form.cstatus" active-color="#90c31f" inactive-color="#dcdfe6" active-value="2" inactive-value="1" ></el-switch>
                </el-form-item>
            </el-form>
            <span slot="footer" class="dialog-footer">
                <el-button type="button" @click="editVisible = false">关 闭</el-button>
                <el-button v-if="dialogStatus=='create'" type="primary" @click="addData">保 存</el-button>
                <el-button v-else type="primary" @click="updateData">保 存</el-button>
            </span>
        </el-dialog>

        <!-- 二级菜单编辑弹出框 -->
        <el-dialog :title="formTitle" :visible.sync="editSubVisible" width="30%" custom-class="mod-el-dialog">
            <el-form :rules="rules" ref="subForm" :model="subForm" label-width="100px">
                <el-form-item label="菜单编码">
                    <el-input v-model="subForm.ccode" disabled placeholder="编码自动生成"></el-input>
                </el-form-item>
                <el-form-item label="菜单名称" prop="cname">
                    <el-input v-model="subForm.cname"></el-input>
                </el-form-item>
                <el-form-item label="备注">
                    <el-input type="textarea" v-model="subForm.description"></el-input>
                </el-form-item>
                <el-form-item label="状态">
                    <el-switch v-model="subForm.cstatus" active-color="#90c31f" inactive-color="#dcdfe6" active-value="2" inactive-value="1"></el-switch>
                </el-form-item>
            </el-form>
            <span slot="footer" class="dialog-footer">
                <el-button type="button" @click="editSubVisible = false">关 闭</el-button>
                <el-button v-if="dialogStatus=='create'" type="primary" @click="addSubData">保 存</el-button>
                <el-button v-else="dialogStatus=='subUpdate'" type="primary" @click="updateSubData">确 定</el-button>
            </span>
        </el-dialog>

        <!-- 删除提示框 -->
        <el-dialog title="提示" :visible.sync="delVisible" width="300px" center>
            <div class="del-dialog-cnt">删除不可恢复，是否确定删除？</div>
            <span slot="footer" class="dialog-footer">
                <el-button @click="delVisible = false">关 闭</el-button>
                <el-button type="primary" @click="deleteRow">保 存</el-button>
            </span>
        </el-dialog>
    </div>
</template>

<script>
    import request from '../../../utils/request'
    import baseMixin from '../../common/tableBase';
    import treeTable from '../../TreeTable'
    import treeToArray from './customEval'
    export default {
        mixins: [baseMixin],
        name: 'customTreeTableDemo',
        components: { treeTable },
        data() {
            return {
                func: treeToArray,
                expandAll: false,
                Urls:{
                    tableList:'/menu/list',
                    tableAdd:'/menu/saveOrUpdate',
                    tableUpdate:'/menu/saveOrUpdate',
                    tableDelete:'/menu/remove',
                    subMenuAdd:'/menu/saveOrUpdate',
                    statusList:'/menu/cstatus'
                },
                listParam: {
                    page: 1,
                    pageSize: 10,
                    condition:''
                },
                form: {
                    guid: '',
                    ccode:'',
                    cname: '',
                    icon:'',
                    parentId:'#',
                    cstatus: '2',
                    description: ''
                },
                subForm: {
                    guid: '',
                    ccode:'',
                    cname: '',
                    parentId:'#',
                    cstatus: '2',
                    description: ''
                },
                isSubMenu:true,
                editSubVisible:false,
                rules: {
                    cname: [
                        { required: true, message: '此字段为必填', trigger: 'blur' },
                        { max: 20, message: '长度在20个字符', trigger: 'blur' }
                    ],
                    icon: [
                        { required: true, message: '此字段为必填', trigger: 'blur' },
                    ],
                },
            }
        },
        created(){

        },
        computed:{},
        methods:{
            resetForm() {
                this.form = {
                    guid: '',
                    ccode:'',
                    cname: '',
                    icon:'',
                    parentId:'#',
                    cstatus: '2',
                    description: ''
                }
            },
            //表单编辑
            handleUpdate(index, row) {
                this.isDisabled=false;
                this.idx = index;
                if(row.pid !='#'){
                    this.formTitle='子菜单编辑';
                    this.editSubVisible = true;
                    this.dialogStatus = 'update';
                    this.preSubEdit(index,row);
                    this.$nextTick(() => {
                        this.$refs['subForm'].clearValidate()
                    });
                }else{
                    this.formTitle='编辑';
                    this.dialogStatus = 'subUpdate';
                    this.editVisible = true;
                    this.preEdit(index,row);
                    this.$nextTick(() => {
                        this.$refs['form'].clearValidate()
                    });
                }
            },
            preEdit(index,row){
                this.form={
                    guid: row.id,
                    ccode: row.ccode,
                    cname: row.name,
                    icon: row.icon,
                    cstatus: row.cstatus,
                    description: row.description,
                    parentId: row.pid,
                }
            },
            preSubEdit(index,row){
                this.subForm={
                    guid:row.id,
                    ccode:row.ccode,
                    cname: row.name,
                    parentId:'',
                    cstatus: '2',
                    description: ''
                }
            },
            handleSubMenu(index, row){
                console.log(row.name)
                this.formTitle='子菜单添加';
                this.editSubVisible = true;
                this.dialogStatus = 'create';
                this.subForm={
                    guid: '',
                    ccode:row.ccode,
                    cname: '',
                    parentId:row.id,
                    cstatus: '2',
                    description: ''
                }
                this.$nextTick(() => {
                    this.$refs['subForm'].clearValidate()
                })
            },
            addSubData(){
                this.$refs['subForm'].validate((valid) => {
                    if(valid){
                        this.preSubmit()
                        var data=this.subForm
                        request({
                            url:this.Urls.subMenuAdd,
                            method: 'post',
                            data
                        }).then(response => {
                            if(response.data.code==0){
                                this.getTableData();
                                this.editSubVisible = false;
                                this.$notify({
                                    title: '成功',
                                    message: '创建子菜单成功',
                                    type: 'success',
                                    duration: 2000
                                })
                            }
                        })
                    }
                })
            },
            updateSubData(){
                var data=this.subForm;
                request({
                    url:this.Urls.subMenuAdd,
                    method: 'post',
                    data
                }).then(response => {
                    if(response.data.code==0){
                        this.getTableData();
                        this.editSubVisible = false;
                        this.$message.success(`修改第 ${this.idx+1} 行成功`);
                    }
                })
            },
            handleDelete(index, row) {
                this.idx = index;
                this.delVisible = true;
                this.delete = {guid:row.id}
            },
            //状态修改
            statusChange(index, row){
                this.status = {
                    guid: row.id,
                    cstatus:row.cstatus
                };
                request({
                    url:this.Urls.statusList,
                    method: 'get',
                    params: this.status
                }).then(response => {
                    if(response.data.code==0){
                        this.getTableData();
                        this.$message.success('修改成功');
                    }
                })
            },
        }
    }
</script>

<style scoped>
    .handle-box {
        margin-bottom: 20px;
        display: flex;
        align-items: center;
    }
    .handle-box .search-right{
        flex: 1;
    }
    .handle-Sselect {
        width: 120px;
    }
    .handle-Melect {
        width: 150px;
    }
    .handle-input {
        width: 300px;
        display: inline-block;
    }
    .del-dialog-cnt{
        font-size: 16px;
        text-align: center
    }
    .tree-subAdd i{
        font-size: 24px;
        margin-left: 10px;
        vertical-align: middle;
        color: #409EFF;
        cursor: pointer;
    }
</style>
