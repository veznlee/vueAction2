import request from '../../utils/request'
var checkMixin = {
    methods: {
        timestampToTime(timestamp) {
            if (timestamp == null || timestamp < 0)
                return "";
            let date = new Date(timestamp);//时间戳为10位需*1000，时间戳为13位的话不需乘1000
            let Y = date.getFullYear() + '-';
            let M = (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1) + '-';
            let D = (date.getDate() < 10 ? '0' + date.getDate() : date.getDate());
            let h = ' ' + (date.getHours() < 10 ? '0' + date.getHours() : date.getHours()) + ':';
            let m = (date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes()) + ':';
            let s = (date.getSeconds() < 10 ? '0' + date.getSeconds() : date.getSeconds());
            return Y + M + D + h + m + s;
        },
        getNewCode(){
            let code = "";
            for (let i = 0; i < 6; i++)
                code += "" + parseInt(Math.random() * 10);
            return code;
        },
        resetForm() {
            this.form = {
                title: '',
                code: '',
                consignee: '',
                consigneePhone: '',
                status: "0",
                client: '',
                items: []//程序生成
            };
            this.log = {
                person: '',
                phone: ''
            }
        },
        handleSubmit(){
            this.form.submitType = 1;
            this.saveData();
        },
        handleRecord(){
            this.form.submitType = 1;
            this.saveData();
        },
        //表单删除
        handleDelete(index, row) {
            this.idx = index;
            this.deleteId = {id: row.orderdetailInfo.id};
            if (this.tableData[index].orderdetailInfo.state == 2) {
                this.delCheckVisible=true;
            }
            else {
                this.delVisible = true;
            }
        },
        // 确定审核删除
        confirmDelCheck(){
            if(this.delOpinion.length<1){
                this.$message.warning('必须输入删除意见！');
                return;
            }
            this.deleteId.processId=this.tableData[this.idx].orderdetailInfo.processId;
            this.deleteId.opinion=this.delOpinion;
            request({
                host: 1,
                url: this.Urls.delCheckUrl,
                method: 'post',
                params: this.deleteId
            }).then(response => {
                if (response.data.code == 0) {
                    this.getTableData();
                    this.$message.success('提交成功');
                    this.delCheckVisible = false;
                }
            })
        },
        // 确定删除
        deleteRow(){
            request({
                host: 1,
                url: this.Urls.deleteForm,
                method: 'get',
                params: this.deleteId
            }).then(response => {
                if (response.data.code == 0) {
                    this.getTableData();
                    this.$message.success('删除成功');
                    this.delVisible = false;
                }
            })
        },
        preAdd(){
            this.resetForm();
            this.disableButton = false;
            this.log.person = localStorage.getItem('ms_username');
            this.log.phone = localStorage.getItem('ms_userphone');
            this.canEdit = true;
            request({
                host: 1,
                url: this.Urls.getPageRights,
                method: 'get',
                params: {menuPosition: this.menuPosition}
            }).then(response => {
                if (response.data.code == 0) {
                    this.pageRights = response.data.data;
                    this.setupPage();
                }
            });
        },
        tableLineAdd(){
            this.selectProductVisible = true;
            this.selectedProduct = [];
            this.searchProduct();
            request({
                host: 0,
                url: this.Urls.getProductTypeList,
                method: 'get',
                params: {}
            }).then(response => {
                if (response.data.code == 0) {
                    this.productTypeList = response.data.data;
                }
            });
        },
        goPrePageProduct(){
            if (this.productParam.page > 1) {
                this.productParam.page--;
                this.searchProduct();
            }
        },
        goNextPageProduct(){
            if (this.productList.length == 10) {
                this.productParam.page++;
                this.searchProduct();
            }
        },
        selectOneProduct(row){
            if(row.selected)
                this.selectedProduct.push(row);
            else{
                for(let i=0;i<this.selectedProduct.length;i++){
                    if(this.selectedProduct[i].guid==row.guid)
                        this.selectedProduct.splice(i,1);
                }
            }
        },
        addLink(){
            if(!this.canEdit)
                return;
            this.selectedLink = [];
            if(this.form.linkManId)
                this.selectedLink.push({guid:this.form.linkManId});
            this.selectLinkVisible = true;
            this.searchLink();
        },
        goPrePageLink(){
            if (this.linkParam.page > 1) {
                this.linkParam.page--;
                this.searchLink();
            }
        },
        goNextPageLink(){
            if (this.linkList.length == 10) {
                this.linkParam.page++;
                this.searchLink();
            }
        },
        selectLink(){
            if (this.selectedLink.length == 0) {
                this.$message.warning(`尚未选择`);
                return;
            }
            this.form.client = this.selectedLink[0].companyGuid;
            this.form.clientName = this.selectedLink[0].cname;
            this.form.consignee = this.selectedLink[0].linkManName;
            this.form.consigneePhone = this.selectedLink[0].linkManPhone;
            this.form.linkManId = this.selectedLink[0].guid;
            this.selectLinkVisible = false;
            this.$refs['form'].clearValidate();
        },
        selectOneVendor(idx, row){
            this.selectedLink = [];
            this.selectedLink.push(row);
            for (let i = 0; i < this.linkList.length; i++) {
                if (this.linkList[i].selected && i != idx) {
                    this.linkList[i].selected = false;
                }
            }
        },
        tableLineDelete(index, row){
            this.form.items.splice(index, 1);
        },
        renderHeader(h) {
            return h('el-button', {
                domProps: {
                    innerHTML: '增加'
                },
                attrs: {
                    type: 'success',
                    disabled: !this.canEdit
                },
                on: {
                    click: this.tableLineAdd
                }
            })
        },
        handleCheck(index, row){
            this.handleEdit(index, row);
            this.canEdit = false;
            this.formTitle = '审核';
        },
        handleRecordList(index, row){
            this.handleEdit(index, row);
            this.canEdit = false;
            this.formTitle = '办理';
        },
        handleView(index, row){
            this.handleEdit(index, row);
            this.canEdit = false;
            this.formTitle = '查看';
        },
        storeChanged(row){
            request({
                url: this.Urls.getStoreAreaList,
                method: 'get',
                params: {storeGuid: row.storeGuid}
            }).then(response => {
                if (response.data.code == 0) {
                    row.areaList = response.data.data;
                }
            })
        },
        storeAreaChanged(row){
            request({
                url: this.Urls.getStorePlaceList,
                method: 'get',
                params: {regionGuid: row.regionGuid}
            }).then(response => {
                if (response.data.code == 0) {
                    row.placeList = response.data.data;
                }
            })
        },
        setupPage(){
            let obj = this.pageRights.orderFieldDesigning;
            this.taskId = this.pageRights.orderHandleDesigning[0].taskId;
            for (let i = 0; i < obj.length; i++) {
                if (obj[i].isRequired == 1)
                    this.rules[obj[i].field] = [{required: true, message: '必须输入项', trigger: 'blur'}];
                else
                    this.rules[obj[i].field] = [];
                if (obj[i].permission == 0) {
                    this.visible[obj[i].field] = true;
                    this.readonly[obj[i].field] = false;
                } else if (obj[i].permission == 1) {
                    this.visible[obj[i].field] = true;
                    this.readonly[obj[i].field] = true;
                } else {
                    this.visible[obj[i].field] = false;
                    this.readonly[obj[i].field] = true;
                }
            }
            if (this.form.status == 1)
                this.canEdit = false;
            this.buttonCtrl = this.pageRights.orderHandleDesigning;
        },
        setMenuPos(){
            let obj = localStorage.ms_menu.substring(2).split("},{");
            let url = window.location.href.substring(window.location.href.lastIndexOf("/") + 1);
            for (let i = 0; i < obj.length; i++) {
                if (obj[i].indexOf("\"" + url + "\"") > 0) {
                    let row = obj[i].replace(/\"/g, "").split(",");
                    // if (row.length == 3 && row[1] != "bindId:null") {
                    //     this.menuPosition = row[1].split(":")[1];
                    //     this.listParam.menuPosition = this.menuPosition;
                    //     console.log("bindId:" + this.listParam.menuPosition);
                    //     break;
                    // }
                    // else {
                        this.menuPosition = row[0].split(":")[1];
                        this.listParam.menuPosition = this.menuPosition;
                        console.log("id:" + this.listParam.menuPosition);
                    // }
                }
            }
        }
    }
};
export default checkMixin;
