<template>
    <div class="table">
        <div class="crumbs">
            <el-breadcrumb separator="/">
                <el-breadcrumb-item><i class="el-icon-tickets"></i>销退入库</el-breadcrumb-item>
            </el-breadcrumb>
        </div>
        <div class="container">
            <div class="handle-box">
                <div class="search-left">
                </div>
                <div align="right" class="search-right">
                    <el-select v-model="listParam.status" filterable placeholder="状态" class="handle-Melect mr10">
                        <el-option key="" label="全部" value=""></el-option>
                        <el-option key="0" label="待办" value="0"></el-option>
                        <el-option key="1" label="已办" value="1"></el-option>
                    </el-select>
                    <el-select v-model="listParam.client" filterable placeholder="选择客户" class="handle-Melect mr10">
                        <el-option key="" label="所有客户" value=""></el-option>
                        <el-option v-for="item in vendorList" :key="item.guid" :label="item.name" :value="item.guid"></el-option>
                    </el-select>
                    <el-select v-model="listParam.operator" filterable placeholder="选择操作员" class="handle-Melect mr10">
                        <el-option key="" label="所有操作员" value=""></el-option>
                        <el-option v-for="item in operatorList" :key="item.id" :label="item.name" :value="item.id"></el-option>
                    </el-select>
                    <el-input v-model="listParam.consignee" placeholder="请输入发货人" @keyup.enter.native="search" class="handle-input mr10"></el-input>
                    <el-input v-model="listParam.consigneePhone" placeholder="请输入联系电话" @keyup.enter.native="search" class="handle-input mr10"></el-input>
                    <el-button type="primary" icon="search" @click="search">搜索</el-button>
                </div>
            </div>
            <el-table :data="tableData" border style="width: 100%" v-loading="listLoading" element-loading-text="正在载入数据，请稍候…">
                <el-table-column type="index" :index="indexMethod" fixed align="center" width="50" label="序号"></el-table-column>
                <el-table-column prop="orderdetailInfo.code" align="center" label="单号" sortable width="150"></el-table-column>
                <el-table-column prop="orderdetailInfo.title" align="center" label="标题" sortable width="150"></el-table-column>
                <el-table-column prop="orderdetailInfo.clientName" align="center" label="客户"></el-table-column>
                <el-table-column prop="orderdetailInfo.consignee" align="center" label="发货人" sortable width="100"></el-table-column>
                <el-table-column prop="orderdetailInfo.consigneePhone" align="center" label="联系电话" width="120"></el-table-column>
                <el-table-column prop="orderdetailInfo.operator" align="center" label="操作员" sortable width="100"></el-table-column>
                <!--<el-table-column prop="updatetime" align="center" label="操作时间" sortable width="150"></el-table-column>-->
                <el-table-column align="center" label="流程">
                    <template slot-scope="scope">
                        <span v-for="(item,index) in scope.row.taskNodeInfo">
                            <span :class="'handle-flow-box flow-box'+item.done">{{item.name}}</span><div v-if="index<tableData[scope.$index].taskNodeInfo.length-1" class="join-line"></div>
                        </span><!--<span><span class="handle-flow-box" style="background-color: rgba(245,108,108,1)">删除</span></span>-->
                    </template>
                </el-table-column>
                <el-table-column prop="orderdetailInfo.opinion" align="center" label="审核意见"></el-table-column>

                <el-table-column label="操作" align="center" width="280">
                    <template slot-scope="scope">
                        <span v-for="(item,index) in scope.row.homepageHandleDesigning">
                            <el-button v-if="item.name=='edit' && tableData[scope.$index].orderdetailInfo.status==0" type="primary" size="small" @click="handleEdit(scope.$index, scope.row)">编辑</el-button>
                            <el-button v-if="item.name=='show'" size="small" @click="handleView(scope.$index, scope.row)">查看</el-button>
                            <el-button v-if="item.name=='transaction' && item.anotherName!='' && tableData[scope.$index].orderdetailInfo.status==0" type="success" size="small" @click="handleCheck(scope.$index, scope.row)">{{item.anotherName}}</el-button>
                            <el-button v-if="item.name=='transaction' && item.anotherName=='' && tableData[scope.$index].orderdetailInfo.status==0" type="success" size="small" @click="handleCheck(scope.$index, scope.row)">提交</el-button>
                            <el-button v-if="item.name=='record' && item.anotherName!='' && tableData[scope.$index].orderdetailInfo.status==0" type="success" size="small" @click="handleRecordList(scope.$index, scope.row)">{{item.anotherName}}</el-button>
                            <el-button v-if="item.name=='record' && item.anotherName=='' && tableData[scope.$index].orderdetailInfo.status==0" type="success" size="small" @click="handleRecordList(scope.$index, scope.row)">记录</el-button>
                            <el-button v-if="item.name=='delete' && tableData[scope.$index].orderdetailInfo.status==0" size="small" :type="tableData[scope.$index].orderdetailInfo.state==2?'warning':'danger'" @click="handleDelete(scope.$index, scope.row)">删除</el-button>
                        </span>
                    </template>
                </el-table-column>
            </el-table>
            <div class="pagination">
                <el-pagination background @size-change="handleSizeChange" @current-change="handleCurrentChange" :current-page="listParam.page" :page-sizes="[10,20,30, 40]" :page-size="listParam.pageSize" layout="total, sizes, prev, pager, next, jumper" :total="total">
                </el-pagination>
            </div>
        </div>

        <!-- 编辑弹出框 -->
        <el-dialog :title="formTitle" :visible.sync="editVisible" width="70%" custom-class="mod-el-dialog">
            <el-row :gutter="20" class="dialogTop mgb20">
                <el-col :span="12" align="center"><div class="grid-content bg-purple">操作员：{{log.person}}</div></el-col>
                <el-col :span="12" align="center"><div class="grid-content bg-purple">操作员电话：{{log.phone}}</div></el-col>
            </el-row>
            <el-form :rules="rules" ref="form" :model="form" status-icon label-width="100px">
                <el-row>
                    <el-col :span="12">
                        <el-form-item label="标题：" prop="title"><el-input v-if="visible.title" v-model="form.title" maxlength="64" :readonly="!canEdit || readonly.title"></el-input></el-form-item>
                    </el-col>
                    <el-col :span="12">
                        <el-form-item label="单号："><el-input v-model="form.code" maxlength="20" readonly="readonly"></el-input></el-form-item>
                    </el-col>
                </el-row>
                <el-row>
                    <el-col :span="8">
                        <el-form-item label="客户：" prop="client"><el-input v-if="visible.client" v-model="form.clientName" maxlength="64" readonly="readonly" @click.native="addLink"></el-input></el-form-item>
                    </el-col>
                    <el-col :span="8">
                        <el-form-item label="发货人：" prop="consignee"><el-input v-if="visible.consignee" v-model="form.consignee" maxlength="64" readonly="readonly" @click.native="addLink"></el-input></el-form-item>
                    </el-col>
                    <el-col :span="8">
                        <el-form-item label="联系电话：" prop="consigneePhone"><el-input v-if="visible.consigneePhone" v-model="form.consigneePhone" maxlength="11" readonly="readonly" @click.native="addLink"></el-input></el-form-item>
                    </el-col>
                </el-row>

                <el-form-item label="退回商品：" v-if="visible.items">
                    <el-table :data="form.items" border style="width: 100%">
                        <el-table-column type="index" :index="indexMethod" fixed align="center" width="50" label="序号"></el-table-column>
                        <el-table-column label="商品编码" width="130" prop="ccode"></el-table-column>
                        <el-table-column label="商品名称" width="130" prop="cname"></el-table-column>
                        <el-table-column label="商品规格" width="100" prop="productUnit"></el-table-column>
                        <el-table-column label="包装规格" width="100" prop="packageUnit"></el-table-column>
                        <el-table-column label="商品数量" width="100">
                            <template slot-scope="scope">
                                <el-input v-model="scope.row.productSum" maxlength="4" :readonly="!canEdit || readonly.items"></el-input>
                            </template>
                        </el-table-column>
                        <el-table-column label="单位" width="80">
                            <template slot-scope="scope">
                                <el-select v-model="scope.row.unit" :disabled="!canEdit || readonly.items">
                                    <el-option v-for="item in scope.row.unitSelect" :key="item.id" :label="item.name" :value="item.id"></el-option>
                                </el-select>
                            </template>
                        </el-table-column>
                        <el-table-column label="生产日期" width="150" prop="cdate">
                            <template slot-scope="scope">
                                <el-date-picker
                                        v-model="scope.row.cdate"
                                        type="date"
                                        :editable="false"
                                        placeholder="选择日期"
                                        value-format="yyyy-MM-dd HH:mm:ss" :readonly="!canEdit || readonly.items">
                                </el-date-picker>
                            </template>
                        </el-table-column>
                        <el-table-column label="选择仓库" width="130">
                            <template slot-scope="scope">
                                <el-select v-model="scope.row.storeGuid" filterable placeholder="选择仓库" class="handle-Melect mr10" @change="storeChanged(scope.row)" :disabled="!canEdit || readonly.items">
                                    <el-option v-for="item in storeList" :key="item.guid" :label="item.cname" :value="item.guid"></el-option>
                                </el-select>
                            </template>
                        </el-table-column>
                        <el-table-column label="选择区域" width="130">
                            <template slot-scope="scope">
                                <el-select v-model="scope.row.regionGuid" filterable placeholder="选择区域" class="handle-Melect mr10" @change="storeAreaChanged(scope.row)" :disabled="!canEdit || readonly.items">
                                    <el-option v-for="item in scope.row.areaList" :key="item.guid" :label="item.cname" :value="item.guid"></el-option>
                                </el-select>
                            </template>
                        </el-table-column>
                        <el-table-column label="选择号" width="180">
                            <template slot-scope="scope">
                                <el-select v-model="scope.row.regionInfoGuid" filterable placeholder="选择号" class="handle-Melect mr10" :disabled="!canEdit || readonly.items">
                                    <el-option v-for="item in scope.row.placeList" :key="item.guid" :label="item.ccode+'号-'+'已使用'+item.cused+'/'+item.capacity" :value="item.guid"></el-option>
                                </el-select>
                            </template>
                        </el-table-column>
                        <el-table-column width="80" align="center" :render-header="renderHeader" fixed="right">
                            <template slot-scope="scope">
                                <el-button size="mini" type="danger" @click="tableLineDelete(scope.$index, scope.row)" :disabled="!canEdit || readonly.items">删除</el-button>
                            </template>
                        </el-table-column>
                    </el-table>
                </el-form-item>

                <fieldset>
                    <legend> 记录 </legend>
                    <el-row>
                        <el-col :span="12">
                            <el-form-item label="物流单号：" prop="trackingNumber"><el-input v-if="visible.trackingNumber" v-model="form.trackingNumber" maxlength="32" :readonly="!canEdit || readonly.trackingNumber"></el-input></el-form-item>
                        </el-col>
                        <el-col :span="12">
                            <el-form-item label="入库时间：" prop="deliveryTime">
                                <el-date-picker v-if="visible.deliveryTime"
                                                v-model="form.deliveryTime"
                                                type="date"
                                                :editable="false"
                                                placeholder="选择日期"
                                                value-format="yyyy-MM-dd HH:mm:ss" :readonly="!canEdit || readonly.deliveryTime">
                                </el-date-picker>
                            </el-form-item>
                        </el-col>
                    </el-row>
                    <el-row>
                        <el-col :span="12">
                            <el-form-item label="司机：" prop="driver"><el-input v-if="visible.driver" v-model="form.driver" maxlength="64" :readonly="!canEdit || readonly.driver"></el-input></el-form-item>
                        </el-col>
                        <el-col :span="12">
                            <el-form-item label="司机电话：" prop="driverPhone"><el-input v-if="visible.driverPhone" v-model="form.driverPhone" maxlength="11" :readonly="!canEdit || readonly.driverPhone"></el-input></el-form-item>
                        </el-col>
                    </el-row>
                    <el-form-item label="入库备注：" prop="description"><el-input v-if="visible.description" type="textarea" v-model="form.description" :readonly="!canEdit || readonly.description"></el-input></el-form-item>
                </fieldset>
            </el-form>
            <span slot="footer" class="dialog-footer">
                <span v-for="(item,index) in buttonCtrl">
                    <el-button v-if="item.name=='reset' && form.status==0" type="normal" size="small" @click="resetForm()" :disabled="!canEdit">重置</el-button>
                    <el-button v-if="item.name=='transaction' && item.anotherName!='' && form.status==0" type="success" size="small" @click="handleSubmit()" :disabled="disableButton">{{item.anotherName}}</el-button>
                    <el-button v-if="item.name=='transaction' && item.anotherName=='' && form.status==0" type="success" size="small" @click="handleSubmit()" :disabled="disableButton">提交</el-button>
                    <el-button v-if="item.name=='record' && item.anotherName!='' && form.status==0" type="success" size="small" @click="handleRecordForm" :disabled="disableButton">{{item.anotherName}}</el-button>
                    <el-button v-if="item.name=='record' && item.anotherName=='' && form.status==0" type="success" size="small" @click="handleRecordForm" :disabled="disableButton">记录</el-button>
                    <el-button v-if="item.name=='agree' && item.anotherName!='' && form.status==0" type="warning" size="small" @click="handleCheckIN(1,item.passwordAnotherName)">{{item.anotherName}}</el-button>
                    <el-button v-if="item.name=='agree' && item.anotherName=='' && form.status==0" type="warning" size="small" @click="handleCheckIN(1,item.passwordAnotherName)">审核通过</el-button>
                    <el-button v-if="item.name=='rollback' && item.anotherName!='' && form.status==0" type="danger" size="small" @click="handleCheckIN(0)">{{item.anotherName}}</el-button>
                    <el-button v-if="item.name=='rollback' && item.anotherName=='' && form.status==0" type="danger" size="small" @click="handleCheckIN(0)">审核不通过</el-button>
                    <el-button v-if="item.name=='save' && form.status==0" size="small" type="primary" @click="saveData" :disabled="!canEdit || disableButton">保存</el-button>
                </span>
                    <el-button size="small" type="normal" @click="editVisible = false">关闭</el-button>
            </span>
        </el-dialog>
        <!-- 编辑弹出框 -->
        <el-dialog title="选择商品" :visible.sync="selectProductVisible" width="50%" custom-class="mod-el-dialog">
            <div class="handle-box">
                <div style="width: 100%" class="search-right">
                    <el-row :gutter="20">
                        <el-col :span="11">&nbsp;
                        </el-col>
                        <el-col :span="5">
                            <el-select v-model="productParam.refSysParam" filterable placeholder="选择类别">
                                <el-option key="" label="所有类别" value=""></el-option>
                                <el-option v-for="item in productTypeList" :key="item.guid" :label="item.cname" :value="item.guid"></el-option>
                            </el-select>
                        </el-col>
                        <el-col :span="5">
                            <el-input v-model="productParam.condition" placeholder="商品编码或名称" @keyup.enter.native="search"></el-input>
                        </el-col>
                        <el-col :span="3">
                            <el-button type="primary" icon="search" @click="searchProduct">搜索</el-button>
                        </el-col>
                    </el-row>
                </div>
            </div>
            <el-table :data="productList" border style="width: 100%">
                <el-table-column type="index" :index="productIndexCal" fixed align="center" width="60" label="序号"></el-table-column>
                <el-table-column label="选择" width="60"><template slot-scope="scope"><el-checkbox v-model="scope.row.selected" :disabled="!canEdit" @change="selectOneProduct(scope.row)"></el-checkbox></template></el-table-column>
                <el-table-column label="商品编码" width="130" prop="ccode"></el-table-column>
                <el-table-column label="商品名称" prop="cname"></el-table-column>
                <el-table-column label="商品规格" width="130" prop="productUnit"></el-table-column>
                <el-table-column label="包装规格" width="130" prop="packageUnit"></el-table-column>
            </el-table>
            <div class="handle-box">
                <div class="search-left"></div>
                <div class="search-right">
                    <el-button type="info" @click="goPrePageProduct">上一页</el-button>
                    {{productParam.page}}/{{parseInt((productParam.total+9)/productParam.pageSize)}}
                    <el-button type="info" @click="goNextPageProduct">下一页</el-button>
                </div>
            </div>
            <span slot="footer" class="dialog-footer">
                <el-button @click="selectProductVisible = false;">取 消</el-button>
                <el-button type="primary" @click="selectProduct">确 定</el-button>
            </span>
        </el-dialog>
        <!-- 编辑弹出框 -->
        <el-dialog title="选择客户" :visible.sync="selectLinkVisible" width="40%" custom-class="mod-el-dialog">
            <div class="handle-box">
                <div style="width: 100%" class="search-right">
                    <el-row :gutter="20">
                        <el-col :span="11">&nbsp;
                        </el-col>
                        <el-col :span="10">
                            <el-input v-model="linkParam.condition" placeholder="企业名称或联系人或联系人电话" @keyup.enter.native="search"></el-input>
                        </el-col>
                        <el-col :span="3">
                            <el-button type="primary" icon="search" @click="searchLink">搜索</el-button>
                        </el-col>
                    </el-row>
                </div>
            </div>
            <el-table :data="linkList" border style="width: 100%">
                <el-table-column label="选择" width="60"><template slot-scope="scope"><el-checkbox v-model="scope.row.selected" :disabled="!canEdit" @change="selectOneVendor(scope.$index,scope.row)"></el-checkbox></template></el-table-column>
                <el-table-column type="index" :index="linkIndexCal" fixed align="center" width="50" label="序号"></el-table-column>
                <el-table-column label="企业名称" prop="cname"></el-table-column>
                <el-table-column label="联系人" prop="linkManName"></el-table-column>
                <el-table-column label="联系电话" prop="linkManPhone"></el-table-column>
            </el-table>
            <div class="handle-box">
                <div class="search-left"></div>
                <div class="search-right">
                    <el-button type="info" @click="goPrePageLink">上一页</el-button>
                    {{linkParam.page}}/{{parseInt((linkParam.total+9)/linkParam.pageSize)}}
                    <el-button type="info" @click="goNextPageLink">下一页</el-button>
                </div>
            </div>
            <span slot="footer" class="dialog-footer">
                <el-button @click="selectLinkVisible = false;">取 消</el-button>
                <el-button type="primary" @click="selectLink">确 定</el-button>
            </span>
        </el-dialog>

        <!-- 删除提示框 -->
        <el-dialog title="提示" :visible.sync="delVisible" width="300px" center>
            <div class="del-dialog-cnt">删除不可恢复，是否确定删除？</div>
            <span slot="footer" class="dialog-footer">
                <el-button @click="delVisible = false">取 消</el-button>
                <el-button type="primary" @click="deleteRow">确 定</el-button>
            </span>
        </el-dialog>
        <!-- 审核意见 -->
        <el-dialog title="审核意见" :visible.sync="checkVisible" width="300px" center>
            <div class="del-dialog-cnt"><el-input v-model="checkOpinion" maxlength="200"></el-input></div>
            <span slot="footer" class="dialog-footer">
                <el-button @click="checkVisible = false">取 消</el-button>
                <el-button type="primary" @click="handleCheckIN2">确 定</el-button>
            </span>
        </el-dialog>
        <!-- 显示出库码 -->
        <el-dialog title="审核成功" :visible.sync="outputCodeVisible" width="300px" center>
            <div class="del-dialog-cnt">请记下{{passwordAnotherName}}：<font color="red">{{outputCode}}</font></div>
            <span slot="footer" class="dialog-footer">
                <el-button type="primary" @click="checkSuccess">确 定</el-button>
            </span>
        </el-dialog>
        <!-- 确认出库码 -->
        <el-dialog :title="passwordTitle" :visible.sync="confirmPasswordVisible" width="300px" center>
            <div class="del-dialog-cnt">请输入{{passwordAnotherName}}:<el-input v-model="this.confirmPassword"></el-input></div>
            <span slot="footer" class="dialog-footer">
                <el-button @click="confirmPasswordVisible = false">取 消</el-button>
                <el-button type="primary" @click="checkPassword">确 定</el-button>
            </span>
        </el-dialog>
        <!-- 确认出库码 -->
        <el-dialog :title="passwordTitle" :visible.sync="recordPasswordVisible" width="300px" center>
            <div class="del-dialog-cnt">请输入{{passwordAnotherName}}:<el-input v-model="this.confirmPassword"></el-input></div>
            <span slot="footer" class="dialog-footer">
                <el-button @click="recordPasswordVisible = false">取 消</el-button>
                <el-button type="primary" @click="handleCheckIN3">确 定</el-button>
            </span>
        </el-dialog>
        <!-- 确认出库码 -->
        <el-dialog title="单据已归档，删除需审核" :visible.sync="delCheckVisible" width="300px" center>
            <div class="del-dialog-cnt">请输入删除意见:<el-input v-model="delOpinion"></el-input></div>
            <span slot="footer" class="dialog-footer">
                <el-button @click="delCheckVisible = false">取 消</el-button>
                <el-button type="primary" @click="confirmDelCheck">确 定</el-button>
            </span>
        </el-dialog>
    </div>
</template>

<script>
    import request from '../../../utils/request';
    import baseMixin from '../../common/tableBase';
    import checkMixin from '../../common/check';
    //引入方法
    import {formatDate} from '../../common/date.js'
    //定义数据
    export default {
        mixins: [baseMixin, checkMixin],
        data() {
            return {
                //修改接口及加上接口文件
                menuPosition: '7',
                processId: 'e6cdf66d6f0a4054bd548460204f0951',
                taskId: '',
                Urls: {
                    getListData: '/workFlow/userTask',
                    getItems: '/sales/inquireByNo',
                    saveForm: '/sales/save',
                    deleteForm: '/workFlow/delOrderdetail',
                    delCheckUrl: '/workFlow/auditDelete',
                    checkForm: '/workFlow/checkOrderdetail',
                    getVendorList: '/user/getCompany',
                    getLinkList: '/user/getLinkMan',
                    getOperatorList: '/workFlow/findOperatorAll',
                    getFlowList: '/workFlow/findNodeInfoByProcessId',
                    getProductList: '/zhccproduct/chooseProduct',
                    getProductTypeList: '/zhccproduct/type',
                    getStoreList: '/zhccstore/chooseStore',
                    getStoreAreaList: '/zhccstore/chooseRegion',
                    getStorePlaceList: '/zhccstore/chooseRegionInfo',
                    getPageRights: '/workFlow/orderSaveWin',
                    getPageRights2: '/workFlow/orderCompileWin'
                },
                listParam: {
                    client: "",
                    menuPosition: '7',
                    operator: "",
                    consignee: "",
                    consigneePhone: "",
                    trackingNumber: '',
                    currentStep: '',
                    status: "0"
                    //程序生成
                },
                productParam: {
                    condition: '',
                    typeGuid: '',
                    page: 1,
                    total: 0,
                    pageSize: 10
                },
                linkParam: {
                    cname: '',
                    condition: '',
                    type: 1,
                    page: 1,
                    total: 0,
                    pageSize: 10
                },
                log: {
                    person: '',
                    phone: ''
                },
                form: {
                    id: '',
                    title: '',
                    code: '',
                    consignee: '',
                    consigneePhone: '',
                    driver: true,
                    deliveryTime: true,
                    client: true,
                    trackingNumber: true,
                    description: true,
                    driverPhone: true,
                    status: 0,
                    items: []//程序生成
                },
                flowList: [],
                vendorList: [],
                linkList: [],
                operatorList: [],
                productList: [],
                productTypeList: [],
                rules: {
                    title: [{required: true, message: "必须输入项", trigger: "blur"}],
                    consignee: [{required: true, message: "必须输入项", trigger: "blur"}],
                    consigneePhone: [{required: true, message: "必须输入项", trigger: "blur"}],
                    driver: [{required: true, message: "必须输入项", trigger: "blur"}],
                    deliveryTime: [{required: true, message: "必须输入项", trigger: "blur"}],
                    client: [{required: true, message: "必须输入项", trigger: "blur"}],
                    trackingNumber: [{required: true, message: "必须输入项", trigger: "blur"}],
                    description: [{required: true, message: "必须输入项", trigger: "blur"}],
                    driverPhone: [{required: true, message: "必须输入项", trigger: "blur"}],
                },
                canEdit: true,
                selectProductVisible: false,
                selectLinkVisible: false,
                selectedLink: [],
                selectedProduct: [],
                storeList: [],
                pageRights: {},
                visible: {
                    title: true,
                    consignee: true,
                    consigneePhone: true,
                    driver: true,
                    deliveryTime: true,
                    client: true,
                    trackingNumber: true,
                    description: true,
                    driverPhone: true,
                },
                readonly: {
                    title: false,
                    consignee: false,
                    consigneePhone: false,
                    driver: false,
                    deliveryTime: false,
                    client: false,
                    trackingNumber: false,
                    description: false,
                    driverPhone: false,
                },
                buttonCtrl: [],
                checkVisible: false,
                checkOpinion: "",
                direction: 0,
                outputCode: '',
                outputCodeVisible: false,
                passwordAnotherName: '',
                confirmPasswordVisible: false,
                confirmPassword: '',
                passwordTitle: '请确认',
                recordPasswordVisible: false,
                disableButton: false,
                delOpinion: '',
                delCheckVisible: false
            }
        },
        created() {
            this.setMenuPos();
            this.init();
        },
        watch: {},
        computed: {},
        methods: {
            init(){
                this.setMenuPos();
                request({
                    host: 0,
                    url: this.Urls.getVendorList,
                    method: 'get',
                    params: {type: 2}
                }).then(response => {
                    if (response.data.code == 0) {
                        this.vendorList = response.data.data;
                    }
                });
                request({
                    host: 1,
                    url: this.Urls.getFlowList,
                    method: 'get',
                    params: {processId: this.processId}
                }).then(response => {
                    if (response.data.code == 0) {
                        this.flowList = response.data.data;
                    }
                });
                request({
                    host: 1,
                    url: this.Urls.getOperatorList,
                    method: 'get',
                    params: {processId: this.processId}
                }).then(response => {
                    if (response.data.code == 0) {
                        this.operatorList = response.data.data;
                    }
                });
                request({
                    host: 0,
                    url: this.Urls.getStoreList,
                    method: 'get',
                    params: {}
                }).then(response => {
                    if (response.data.code == 0) {
                        this.storeList = response.data.data;
                    }
                });
            },
            searchProduct(){
                request({
                    host: 0,
                    url: this.Urls.getProductList,
                    method: 'get',
                    params: this.productParam
                }).then(response => {
                    if (response.data.code == 0) {
                        this.productParam.total = response.data.total;
                        for (let i = 0; i < response.data.data.length; i++) {
                            let row = response.data.data[i];
                            row.selected = false;
                            for (let j = 0; j < this.selectedProduct.length; j++) {
                                if (this.selectedProduct[j].guid == row.guid)
                                    row.selected = true;
                            }
                            row.productUnit = row.pdSpecification + row.pdsSRefSysParam + '/' + row.pdsBRefSysParam;
                            row.packageUnit = row.packSpecification + row.pdsBRefSysParam + '/' + row.packsBRefSysParam;
                            row.unit = "0";
                            row.unitSelect = [{id: "0", name: row.pdsBRefSysParam}, {
                                id: "1",
                                name: row.packsBRefSysParam
                            }]
                        }
                        this.productList = response.data.data;
                    }
                });
            },
            selectProduct(){
                for (let i = 0; i < this.productList.length; i++) {
                    if (this.productList[i].selected) {
                        let obj = this.productList[i];
                        this.form.items.push({
                            cname: obj.cname,
                            productUnit: obj.productUnit,
                            packageUnit: obj.packageUnit,
                            productSum: 0,
                            houseNum: 0,
                            cdate: '',
                            storeGuid: '',
                            regionGuid: '',
                            regionInfoGuid: '',
                            ccode: obj.ccode,
                            refZhccProduct: obj.guid,
                            effectiveDate: obj.effectiveDate,
                            edUnit: obj.edUnit,
                            wdUnit: obj.edUnit,
                            warningDate: obj.warningDate,
                            warningNum: obj.warningNum,
                            refZhccInStoreId: '',
                            areaList: [],
                            placeList: [],
                            unit: "0",
                            unitSelect: obj.unitSelect,
                            palletCapacity: obj.palletCapacity
                        });
                    }
                }
                this.selectProductVisible = false;
            },
            searchLink(){
                request({
                    host: 0,
                    url: this.Urls.getLinkList,
                    method: 'get',
                    params: this.linkParam
                }).then(response => {
                    if (response.data.code == 0) {
                        this.linkParam.total = response.data.total;
                        for (let i = 0; i < response.data.data.length; i++) {
                            let row = response.data.data[i];
                            row.selected = false;
                            for (let j = 0; j < this.selectedLink.length; j++) {
                                if (this.selectedLink[j].guid == row.guid)
                                    row.selected = true;
                            }
                        }
                        this.linkList = response.data.data;
                    }
                });
            },
            getTableData() {
                this.listLoading = true;
                request({
                    host: 1,
                    url: this.Urls.getListData,
                    method: 'get',
                    params: this.listParam
                }).then(response => {
                    if (response.data.code == 0) {
                        for (let i = 0; i < response.data.data.length; i++) {
                            //设置当前节点之前的均流程完成，当前节点及之后的为未完成
                            let done = 1;
                            for (let j = 0; j < response.data.data[i].taskNodeInfo.length; j++) {
                                if (done == 1 && response.data.data[i].taskNodeInfo[j].name == response.data.data[i].orderdetailInfo.currentStep) {
                                    done = 0;
                                }
                                response.data.data[i].taskNodeInfo[j].done = done;
                            }
                            response.data.data[i].orderdetailInfo.deliveryTime = this.timestampToTime(response.data.data[i].orderdetailInfo.deliveryTime);
                        }
                        this.tableData = response.data.data;
                        this.total = response.data.total;
                        this.listLoading = false;
                    }
                });
            },
            handleEdit(index, row){
                this.disableButton = false;
                this.formTitle = '编辑';
                this.form = row.orderdetailInfo;
                this.dialogStatus = 'update';
                this.canEdit = true;
                this.editVisible = true;
                this.log.person = this.form.operator;
                this.log.phone = this.form.operatorPhone;
                this.$nextTick(() => {
                    this.$refs['form'].clearValidate()
                });
                request({
                    url: this.Urls.getItems,
                    method: 'get',
                    params: {orderNo: this.form.id, id: this.form.id}
                }).then(response => {
                    if (response.data.code == 0) {
                        for (let i = 0; i < response.data.data.length; i++) {
                            let row = response.data.data[i];
                            row.cdate = this.timestampToTime(row.cdate);
                            this.form.linkManId = row.linkManId;
                            row.areaList = [];
                            row.placeList = [];

                            row.unitSelect = [{id: "0", name: row.productUnit.split("/")[1]}, {
                                id: "1",
                                name: row.packageUnit.split("/")[1]
                            }];
                            let areaId = row.regionListGuid.split(",");
                            let areaName = row.regionListCname.split(",");
                            for (let j = 0; j < areaId.length; j++)
                                row.areaList.push({guid: areaId[j], cname: areaName[j]});
                            let placeId = row.regionInfoListGuid.split(",");
                            let placeName = row.regionInfoListCname.split(",");
                            let placeUsed = row.regionInfoListUsed.split(",");
                            for (let j = 0; j < placeId.length; j++)
                                row.placeList.push({
                                    ccode: placeName[j],
                                    guid: placeId[j],
                                    cused: parseInt(placeUsed[i]),
                                    capacity: parseInt(row.capacity)
                                });
                        }
                        this.form.items = response.data.data;
                        request({
                            host: 1,
                            url: this.Urls.getPageRights2,
                            method: 'get',
                            params: {id: this.form.id}
                        }).then(response => {
                            if (response.data.code == 0) {
                                this.pageRights = response.data.data;
                                this.setupPage();
                            }
                        })
                    }
                })
            },
            saveData(){
                this.$refs['form'].validate((valid) => {
                    if (valid) {
                        this.form.taskId = this.taskId;
                        if (this.form.deliveryTime == null || this.form.deliveryTime == "") {
                            this.form.deliveryTime = '1900-01-01 00:00:00';
                        }
                        this.form.processId = this.processId;
                        if (this.form.submitType != 1)
                            this.form.submitType = 0;
                        this.form.outputCode = "";
                        if (this.form.items.length == 0) {
                            this.$message.warning("必须输入商品详情才可保存");
                            return;
                        }
                        for (let i = 0; i < this.form.items.length; i++) {
                            let row = this.form.items[i];
                            if (row.unit == 0)
                                row.houseNum = row.productSum;
                            else
                                row.houseNum = row.productSum * parseInt(row.packageUnit);
                            row.linkManId = this.form.linkManId;
                            if (parseInt(row.productSum) <= 0 || isNaN(row.productSum)) {
                                this.$message.warning("第" + (i + 1) + "行商品数量必须是大于0的数字");
                                return;
                            }
                            if (row.cdate == '') {
                                this.$message.warning("第" + (i + 1) + "行未选择生产日期");
                                return;
                            }
                            if (row.regionInfoGuid == '') {
                                this.$message.warning("第" + (i + 1) + "行仓库选项未完全指定");
                                return;
                            }
                            let used = 0;
                            let arr = row.regionInfoListGuid.split(",");
                            let placeName = '';
                            for (let j = 0; j < arr.length; j++) {
                                if (row.regionInfoGuid == arr[j]) {
                                    used = row.regionInfoListUsed.split(",")[j];
                                    placeName = row.regionInfoListCname.split(",")[j];
                                }
                            }
                            if ((row.oneCapacity - used) * row.palletCapacity < row.houseNum) {
                                this.$message.warning("第" + (i + 1) + "行中第" + placeName + "号余量不足");
                            }
                        }
                        let data = {items: this.form.items};
                        data.head = this.form;
                        this.disableButton = true;
                        request({
                            host: 0,
                            url: this.Urls.saveForm,
                            method: 'post',
                            data
                        }).then(response => {
                            if (response.data.code == 0) {
                                this.getTableData();
                                this.disableButton = false;
                                this.editVisible = false;
                                if (this.form.submitType == 1)
                                    this.$message.success(`提交成功`);
                                else if (this.idx == -1)
                                    this.$message.success(`保存成功`);
                                else
                                    this.$message.success(`修改第 ${this.idx + 1} 行成功`);
                            } else
                                this.disableButton = false;
                        })
                    }
                });
            },
            handleRecordForm(){
                if (this.form.outputCode != "") {
                    this.passwordTitle = "请确认" + this.passwordAnotherName;
                    this.recordPasswordVisible = true;
                    this.direction = 2;
                }
                else {
                    this.disableButton = true;
                    this.direction = 2;
                    this.handleCheckIN3();
                }
            },
            handleCheckIN(direction, passwordAnotherName){
                this.checkVisible = true;
                this.direction = direction;
                this.passwordAnotherName = passwordAnotherName;
            },
            handleCheckIN2(){
                if (this.checkOpinion.length < 2) {
                    this.$message.warning("必须输入意见");
                    return;
                }
                if (this.form.outputCode != "") {
                    this.passwordTitle = "请确认" + this.passwordAnotherName;
                    this.confirmPasswordVisible = true;
                }
                else
                    this.handleCheckIN3();
            },
            checkPassword(){
                if (this.confirmPassword != this.form.outputCode) {
                    this.passwordTitle = this.passwordAnotherName + "不正确哦，请重新输入";
                } else {
                    this.handleCheckIN3();
                }
            },
            handleCheckIN3(){
                this.checkVisible = false;
                this.form.taskId = this.taskId;
                //this.form.processId = this.processId;
                this.form.checkType = (this.direction == 2 ? 1 : this.direction);
                this.form.opinion = this.checkOpinion;
                this.confirmPasswordVisible = false;
                this.form.outputCode = "";
                this.outputCode = "";
                if (this.direction == "1") {
                    for (let i = 0; i < this.buttonCtrl.length; i++) {
                        if (this.buttonCtrl[i].name == "agree") {
                            if (this.buttonCtrl[i].isGeneratePassword == 1) {
                                this.form.outputCode = this.getNewCode();
                                this.outputCode = this.form.outputCode;
                                this.outputCodeVisible = true;
                            }
                            else
                                this.handleCheckIN4();
                        }
                    }
                }
                else {
                    this.handleCheckIN4();
                }
            },
            checkSuccess(){
                this.outputCodeVisible = false;
                this.editVisible = false;
                this.handleCheckIN4();
            },
            handleCheckIN4(){
                if (this.form.deliveryTime == null || this.form.deliveryTime == "")
                    this.form.deliveryTime = '1900-01-01 00:00:00';
                for (let i = 0; i < this.form.items.length; i++) {
                    let row = this.form.items[i];
                    if (row.unit == 0)
                        row.houseNum = row.productSum;
                    else
                        row.houseNum = row.productSum * parseInt(row.packageUnit);
                }
                let data = this.form;
                request({
                    host: 1,
                    url: this.Urls.checkForm,
                    method: 'post',
                    data
                }).then(response => {
                    if (response.data.code == 0) {
                        this.$message.success(`审核成功`);
                        this.outputCodeVisible = false;
                        this.getTableData();
                        this.disableButton = false;
                        this.editVisible = false;
                    }
                })
            }
        }
    }
</script>

<style scoped>
    .handle-flow-box{
        position: relative;
        display: inline-block;
        width: 34px;
        border:1px solid rgba(166,207,76,1);
        font-size:11px;
        line-height: 24px;
        height:24px;
        overflow: hidden;
        padding-left: 2px;
        letter-spacing: 3px;
        border-radius: 3px;
    }
    .flow-box0{
        color:black;
        background-color: transparent;
    }
    .flow-box1{
        color:white;
        background-color:  rgba(166,207,76,1);
    }
    .join-line{
        position: relative;
        display: inline-block;
        width:10px;
        height:4px;
        background-color: rgba(166,207,76,1);
        top:-10px;
    }
    fieldset{
        border:1px solid #d5e2d0;
        border-radius: 5px;
        margin: 10px;
    }
    legend{
        margin-left: 50px;
        padding-left: 10px;
        padding-right: 10px;
    }
</style>
